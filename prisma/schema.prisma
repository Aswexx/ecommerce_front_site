generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String    @id @default(cuid())
  name          String    @unique @db.VarChar(20)
  imageUrl      String    @map("image_url")
  imageBlurHash String?   @map("image_blur_hash")
  price         Int
  stock         Int
  isPopular     Boolean   @map("is_popular")
  description   String?   @db.VarChar(100)
  features      String[]
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamp
  deletedAt     DateTime? @map("deleted_at") @db.Timestamp

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  favorite Favorite[]
  purchase Purchase[]
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique @db.VarChar(20)
  product Product[]
}

model User {
  id           String   @id
  email        String   @unique @db.VarChar(50)
  name         String?
  phone        String?  @unique @db.VarChar(20)
  address      String?  @unique @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp
  subscription Boolean?
  birthday     String?

  favorite Favorite[]
}

model Favorite {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  @@unique([userId, productId])
}

model News {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(20)
  content   String   @db.VarChar(200)
  imageUrl  String   @map("image_url")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String   @db.VarChar(50)
  phone     String   @db.VarChar(20)
  type      String   @db.VarChar(10)
  content   String   @db.VarChar(400)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
}

model Order {
  id               String    @id
  registeredUserId String?   @map("registered_user_id")
  tradeId          String?   @unique @map("trade_id")
  tradeTime        DateTime? @map("trade_time") @db.Timestamp
  tradeAmount      Int       @map("trade_amount")
  tradeUserEmail   String?   @map("trade_user_email") @db.VarChar(50)
  tradeUserPhone   String?   @map("trade_user_phone") @db.VarChar(20)
  recieverName     String    @map("reciever_name") @db.VarChar(20)
  recieverAddress  String    @map("reciever_address") @db.VarChar(50)
  progress         String
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamp

  purchase Purchase[]
}

model Purchase {
  id String @id @default(cuid())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  count           Int
  transactionDone Boolean @default(false) @map("transaction_done")

  @@unique([id, orderId, productId])
}
